%{
#include "wae.h"

#define YYSTYPE Expr

static WAE *tree;

void yyerror(char *message);
%}

Expr = - ae:WAE -           { tree = (WAE *) ae; }

WAE    = Number
       | Id
       | With
       | Operation

Operation = LBRACE -
            o:OP SPACE
            l:WAE SPACE
            r:WAE -
            RBRACE -        { $$ = (Expr) WAEOp_new(o, (WAE *) l, (WAE *) r); }

With   = LBRACE -
         WITH SPACE
         LBRACE -
         i:Id SPACE
         e:WAE -
         RBRACE SPACE
         b:WAE -
         RBRACE -           { $$ = (Expr) WAEWith_new((WAEId *) i, (WAE *) e, (WAE *) b); }

Id = < [-_A-Za-z0-9?]+ >    { $$ = (Expr) WAEId_new(strdup(yytext)); }

Number = < MINUS? [0-9]+ >  { $$ = (Expr) WAENum_new(atoi(yytext)); }

OP     = PLUS               { $$ = WAE_ADD; }
       | MINUS              { $$ = WAE_SUB; }
WITH   = 'with'
PLUS   = '+'
MINUS  = '-'
LBRACE = '{'
RBRACE = '}'

-      = WHITE*
SPACE  = WHITE+
WHITE  = ' ' | '\t' | EOL
EOL    = '\r\n' | '\n' | '\r'


%%

void yyerror(char *message) {
  fprintf(stderr, "%s", message);
  fprintf(stderr, "\n");
  exit(1);
}

WAE *WAE_parse() {
  if (!yyparse()) {
    yyerror("syntax error");
    return NULL;
  }

  return tree;
}
